{"version":3,"sources":["Components/Card/Card.module.css","Components/Board/board.module.css","images/naruto.jpg","images/saske.jpg","images/kakashi.jpg","images/neji.jpg","images/sakura.jpg","images/kushina.png","images/shikamaru.jpg","images/rockli.jpg","images/back.jpg","Components/Card/Card.jsx","data/data.js","Components/Board/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","flipCard","pictureSrc","flippedToFront","index","name","className","styles","card","src","alt","front","flipped","onClick","back","data","picture","naruto","saske","kakashi","neji","sakura","kushina","shikamaru","rockli","Board","useState","deck","setDeck","activeCards","setActiveCards","foundPairs","setFoundPairs","createBoard","reduce","res","current","concat","sort","Math","random","useEffect","length","firstIndex","secondsIndex","indexOf","setTimeout","btn","cards","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0f20280.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__14Waa\",\"front\":\"Card_front__3b9Qd\",\"back\":\"Card_back__2v2Um\",\"flipped\":\"Card_flipped__Fuak0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"board_cards__1NvK4\",\"btn\":\"board_btn__3ALgL\"};","module.exports = __webpack_public_path__ + \"static/media/naruto.d6c595a8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/saske.7ef68d7b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kakashi.3587a4ae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/neji.597e7d5a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sakura.6a154d9c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kushina.b40ba522.png\";","module.exports = __webpack_public_path__ + \"static/media/shikamaru.1a6d1237.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rockli.c756f229.jpg\";","module.exports = __webpack_public_path__ + \"static/media/back.4d4671a2.jpg\";","import React from 'react'\r\nimport styles from './Card.module.css'\r\n\r\n\r\nconst Card = ({flipCard,pictureSrc,flippedToFront,index,name}) => {\r\n\r\n    return (\r\n\r\n\r\n        <div>\r\n            {\r\n                flippedToFront(index) ?\r\n                    <div className={`${styles.card}`}>\r\n                        <img src={pictureSrc} alt=\"card\"\r\n                             className={styles.front}\r\n                        />\r\n                    </div>\r\n               :\r\n                    <div className={`${styles.card} ${styles.flipped} `}\r\n                         onClick={() => flipCard(index, name)}>\r\n                        <img src={pictureSrc} alt=\"card\"\r\n                             className={styles.back}\r\n                        />\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Card","import naruto from './../images/naruto.jpg'\r\nimport saske from './../images/saske.jpg'\r\nimport kakashi from './../images/kakashi.jpg'\r\nimport neji from './../images/neji.jpg'\r\nimport sakura from './../images/sakura.jpg'\r\nimport kushina from './../images/kushina.png'\r\nimport shikamaru from './../images/shikamaru.jpg'\r\nimport rockli from './../images/rockli.jpg'\r\n\r\nexport const data = [\r\n    {\r\n        picture: naruto,\r\n        name: 'naruto',\r\n    },\r\n    {\r\n        picture: saske,\r\n        name: 'saske',\r\n    },\r\n    {\r\n        picture: kakashi,\r\n        name: 'kakashi',\r\n    },\r\n    {\r\n        picture: neji,\r\n        name: 'neji',\r\n    },\r\n    {\r\n        picture: sakura,\r\n        name: 'sakura',\r\n    },\r\n    {\r\n        picture: kushina,\r\n        name: 'kushina',\r\n    },\r\n    {\r\n        picture: shikamaru,\r\n        name: 'shikamaru',\r\n    },\r\n    {\r\n        picture: rockli,\r\n        name: 'rockli',\r\n    }\r\n]\r\n\r\nexport default data;","import React, {useEffect, useState} from 'react'\r\nimport Card from \"../Card/Card\";\r\nimport styles from './board.module.css'\r\nimport data from './../../data/data'\r\nimport back from './../../images/back.jpg'\r\n\r\nconst Board = () => {\r\n\r\n    const [deck, setDeck] = useState([]);\r\n    const [activeCards, setActiveCards] = useState([]);\r\n    const [foundPairs, setFoundPairs] = useState([]);\r\n\r\n    const createBoard = () => {\r\n        setDeck(data.reduce(function (res, current) {\r\n            return res.concat([current, current]);\r\n        }, [])\r\n            .sort(() => Math.random() - 0.5))\r\n    }\r\n\r\n    useEffect(() => {\r\n        createBoard()\r\n    }, [])\r\n\r\n    const restart = () => {\r\n        setActiveCards([])\r\n        setFoundPairs([])\r\n        createBoard()\r\n    }\r\n\r\n    const flipCard = (index) => {\r\n        if (activeCards.length === 0) {\r\n            setActiveCards([index])\r\n        }\r\n\r\n        if (activeCards.length === 1) {\r\n\r\n            const firstIndex = activeCards[0];\r\n            const secondsIndex = index;\r\n\r\n            if (activeCards.indexOf(index) === -1) {\r\n\r\n                setActiveCards([...activeCards, index]);\r\n\r\n                if (deck[firstIndex].name === deck[secondsIndex].name && foundPairs.indexOf(index) === -1) {\r\n                    setFoundPairs([...foundPairs, firstIndex, secondsIndex])\r\n                    setActiveCards([])\r\n                }\r\n            }\r\n\r\n            setTimeout(() => {\r\n                setActiveCards([]);\r\n            }, 900)\r\n\r\n        }\r\n    }\r\n\r\n    function flippedToFront(index) {\r\n        return (activeCards.indexOf(index) !== -1) || foundPairs.indexOf(index) !== -1;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Memory game</h1>\r\n            <p>open cards <b>{foundPairs.length} of {deck.length}</b></p>\r\n            <button onClick={() => restart()} className={styles.btn}>start over</button>\r\n            <div className={styles.cards}>\r\n                {\r\n                    deck.map((card, index) => {\r\n\r\n                            const pictureSrc = flippedToFront(index) ? card.picture : back\r\n                            const name = card.name\r\n\r\n                            return (\r\n                                <Card flipCard={flipCard}\r\n                                      pictureSrc={pictureSrc}\r\n                                      flippedToFront={flippedToFront}\r\n                                      index={index}\r\n                                      name={name}\r\n                                      key={index}\r\n                                />\r\n                            )\r\n                        }\r\n                    )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Board from \"./Components/Board/Board\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Board/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}